% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/B001_integerSet.R
\name{integerSet}
\alias{integerSet}
\alias{initialize,integerSet-method}
\alias{frames}
\alias{integerCheck}
\title{An S4 class to represent a set of integers}
\usage{
integerSet(...)

\S4method{initialize}{integerSet}(
  .Object,
  integers = numeric(),
  from = numeric(),
  to = numeric(),
  over = numeric(),
  under = numeric()
)

integerSet(...)

frames(...)

integerCheck(inputNum, inputSet)
}
\arguments{
\item{integers, from, to, over, under}{parameters for the constructor new("integerSet") go directly into the relevant slots}

\item{inputNum}{a single to number to be compared against inputSet}

\item{inputSet}{an integerSet object}
}
\description{
An S4 class to describe a set of integers using conditions. Here are some examples;
\itemize{
\item Any integer from 5 to 10 or from 50 to 100
\item Any integer under 7
\item Any integer in the vector c(12,11,17,14)
}

It can also represent the union of such sets. For example any integer that meets any one of the above conditions.

The function integerCheck checks whether a given integer belongs to a given integerSet.
}
\details{
integerCheck(number,set) will return TRUE if
\itemize{
\item number belongs to set@integers
\item number>set@over
\item number<set@under
\item sum(number>set@from)>sum(number>set@to)
}

If none of these conditions are met, integerCheck will return FALSE. The only exception to all of this is if set@integers contains -Inf. In this case, integerCheck will always FALSE.
}
\section{Slots}{

\describe{
\item{\code{integers}}{A vector of integers.}

\item{\code{from}}{stuff}

\item{\code{to}}{see from}

\item{\code{over}}{lala}

\item{\code{under}}{Like over, but for the < operator}
}}

\examples{
#An integer set
autoPass=new("integerSet")
integerCheck(4,autoPass)  
autoFail=new("integerSet",integers=-Inf)
integerCheck(4,autoFail)
}
